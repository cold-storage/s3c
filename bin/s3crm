#!/usr/bin/env node

'use strict';

if (process.argv.length < 3 ||
  process.argv[2] === '-h' ||
  process.argv[2] === '--help') {
  exitWithError(new Error(`
  Usage: s3crm local/file.txt remote/path

  Deletes local/file.txt
  Deletes remote/path/file.txt from S3
  Deletes password from Keychain
`));
}

const path = require('path');
const keychain = require('keychain');
const fs = require('fs');
const bucketName = process.env.S3C_BUCKET;
if (!bucketName) {
  exitWithError(new Error('process.env.S3C_BUCKET is required'));
}
const s3 = new(require('../lib/s3'))({
  bucket: bucketName
});

const localFile = process.argv[2];
const localFileName = path.basename(localFile);
const remotePath = s3.cleanRemotePath(process.argv[3]);
const remoteFile = path.join(remotePath, localFileName);

// console.log('localFile ' + localFile);
// console.log('localFileName ' + localFileName);
// console.log('remotePath ' + remotePath);
// console.log('remoteFile ' + remoteFile);

// process.exit(33);

function exitWithError(err) {
  console.error(err.message);
  process.exit(13);
}

function doItAll() {
  try {
    fs.unlinkSync(localFile);
  } catch (err) {
    if (err && !err.message.includes('o such file or directory')) {
      console.error(err.message);
    }
  }
  s3.delete(remoteFile, function(err) {
    if (err) exitWithError(err);
    keychain.deletePassword({
      account: bucketName,
      service: remoteFile
    }, function(err) {
      if (err && !err.message.includes('ould not find password')) {
        exitWithError(err);
      }
    });
  });
}

doItAll();